#include <iostream>
#include <memory>
using namespace std;
struct TreeNode {
    // member value
    int nodeValue;   // the data type can be anything 
    unique_ptr<TreeNode> leftNode; // declare unique pointer to automactically manage the memory
    unique_ptr<TreeNode> rightNode;
    
    // constructor 
    // TreeNode(int value) {
    //     nodeValue = value;
    //     leftNode = nullptr;
    //     rightNode = nullptr;
    // }

    // or we can write above code into one line
    TreeNode(int value):  nodeValue(value), leftNode(nullptr),rightNode(nullptr) {}
};

// in order to create an actual tree with root node so here we create a class of BSTree

class BSTree {
    public:
    // constructor inside:
        // BSTree () {
        //     rootAddress = nullptr;
        // }
        BSTree(): rootAddress(nullptr) {}
        
        // BSTree (TreeNode* rootNode) {
        //     rootAddress = rootNode;
        // }
        BSTree (unique_ptr<TreeNode> rootNode): rootAddress(move(rootNode)) {}
        // whenever we need to assign the pointer a new value use move function to modify the actual content directly
        void Print();   // to print the tree as string, each node is "{ nodeValue }"
        void Insert(unique_ptr<TreeNode> newNode); // insert a node to the BST
    // void Print() {
    //     if (this->rootAddress == nullptr) {
    //         cout << "{}" << endl;
    //     } else {
    //         cout << this->PrintTreeNode(this->rootAddress) << endl; // this key word is pointer to the class so we need  -> to access the class methods
    //     }
    // }
    // we can define the class outside the class as well
        bool Contains(unique_ptr<TreeNode> node);
    
    private:
        unique_ptr<TreeNode> rootAddress; // private class member can only access through public method 
        string PrintTreeNode(const TreeNode* node);
        // in Print there is no need to modify the ownership of TreeNode so no need pass the unique_ptr, so just use a const raw pointer
        void InsertRecursiveForSubTree(unique_ptr<TreeNode> node, unique_ptr<TreeNode>& currentRoot);
        
        bool ContainsRecursiveForSubTree(unique_ptr<TreeNode> node, unique_ptr<TreeNode> &root);
};

void BSTree::Print() {
    cout << "Print the whole tree as string ";
    if (this->rootAddress == nullptr) {
        cout << "{}" << endl;
    } else {
        cout << this->PrintTreeNode(this->rootAddress.get()) << endl; // this key word is pointer to the class so we need  -> to access the class methods
        // .get() method to return a raw pointer from the unique_ptr
    }
}

string BSTree::PrintTreeNode(const TreeNode* node) {
    string leftNodeString = (node->leftNode!=nullptr) ? this->PrintTreeNode(node->leftNode.get()) : "{}";  // we need to pass the child do the recussion
    string rightNodeString = node->rightNode ? this->PrintTreeNode(node->rightNode.get()) : "{}"; // notice the condition order can also be just the variable itself (node->rightNode) to check if it exists
    string result = "{" + leftNodeString + "," + to_string(node->nodeValue) + "," + rightNodeString + "}"; // iterate the tree node using the order ‘left, root, right’, this order can also be 'root, left, right' or 'left, right, root'
    return result;
}

void BSTree::Insert(unique_ptr<TreeNode> newNode) {
    if (this->rootAddress == nullptr) { // nullptr is pointer, NULL is an int means 0 comes from C, but it can also use as nullptr in some cases
        this->rootAddress = move(newNode);
    } else {
        this-> InsertRecursiveForSubTree(move(newNode), this->rootAddress);
    }
}

void BSTree::InsertRecursiveForSubTree(unique_ptr<TreeNode> node, unique_ptr<TreeNode>& currentRoot) {
    // since we need to modify the value passing by outside the scope so we need to pass this current root node by reference to modify the original content
    
    if (currentRoot->nodeValue > node->nodeValue) {
        // if the new node value is smaller than the root node we need to insert this new to the left child tree
        if (currentRoot->leftNode == nullptr) {
            // if this node does not have a left node then do the insertion 
            currentRoot->leftNode = move(node);
        } else {
            this->InsertRecursiveForSubTree(move(node), currentRoot->leftNode);
        }
        return;
    } else if(currentRoot->nodeValue == node->nodeValue) {
        return;
    } else if(currentRoot->nodeValue < node->nodeValue) {
        if (currentRoot->rightNode == nullptr) {
            // if this node does not have a left node then do the insertion 
            currentRoot->rightNode = move(node);
        } else {
            this->InsertRecursiveForSubTree(move(node), currentRoot->rightNode);
        }
        return;
    }
}

int main() {
    // Write C++ code here
    
    auto myTreeNode = make_unique<TreeNode>(5); // Root Node, we can use auto let the compiler deduce the type
    // make_unique return a unique_ptr auto deleting pointer manage the object and return a new instance of TreeNode object
    // and the type is not a TreeNode anymore it's a unique_ptr<TreeNode>
    auto myTreeLeftNode = make_unique<TreeNode>(3); // Left Child Node
    auto myTreeRightNode = make_unique<TreeNode>(8); // Right Child Node
    
    // node connection, this is a very important step to build a binary tree using linked list idea
    myTreeNode->leftNode = move(myTreeLeftNode); // myTreeNode is a root node so when it accesses the child node it uses . symbol, since it is not a pointer 
    // we need to use & symbol before myTreeLeftNode to pass the address of the Left Child Node to the root node left child pointer
    // move(), transfer the pointer owner ship without copying the original data 
    myTreeNode->rightNode = move(myTreeRightNode);
    // cout << myTreeNode.leftNode -> nodeValue  << endl;   since the leftNode variable is a pointer so we need to use -> symbol to access the node value
    cout << "Print a single node value " << myTreeNode->leftNode -> nodeValue  << endl;
    
    // BSTree emptyTree(nullptr);
    BSTree emptyTree {}; // above line can be also in this way, using the  {} to initializing the instance of this class
    emptyTree.Print();
    
    // to print the tree using { {}, nodeValue, {} } this format 
    BSTree threeNodesTree{move(myTreeNode)};
    threeNodesTree.Print();
    
    auto node = make_unique<TreeNode>(4); 
    threeNodesTree.Insert(move(node));
    
    threeNodesTree.Print();

    return 0;
}
