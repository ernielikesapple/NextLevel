// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;
struct TreeNode {
    // member value
    int nodeValue;   // the data type can be anything 
    TreeNode* leftNode;
    TreeNode* rightNode;
    
    // constructor 
    // TreeNode(int value) {
    //     nodeValue = value;
    //     leftNode = nullptr;
    //     rightNode = nullptr;
    // }

    // or we can write above code into one line
    TreeNode(int value):  nodeValue(value), leftNode(nullptr),rightNode(nullptr) {}
};

// in order to create an actual tree with root node so here we create a class of BSTree

class BSTree {
    public:
    // constructor inside:
        // BSTree () {
        //     rootAddress = nullptr;
        // }
        
        BSTree(): rootAddress(nullptr) {}
        
        // BSTree (TreeNode* rootNode) {
        //     rootAddress = rootNode;
        // }
        BSTree (TreeNode* rootNode): rootAddress(rootNode) {}
        
        void Print();   // to print the tree as string, each node is "{ nodeValue }"
        
    private:
        TreeNode* rootAddress; // private class member can only access through public method 
        string printTreeNode(TreeNode* node);
        
};

void BSTree::Print() {
    if (this->rootAddress == nullptr) {
        cout << "{}" << endl;
    } else {
        cout << this->printTreeNode(this->rootAddress) << endl; // this key word is pointer to the class so we need  -> to access the class methods
    }
}

string BSTree::printTreeNode(TreeNode* node) {
    string leftNodeString = node->leftNode ? this->printTreeNode(node) : "{}"; 
    string rightNodeString = node->rightNode ? this->printTreeNode(node) : "{}"; 
    string result = to_string(node->nodeValue);
    return result;
}

int main() {
    // Write C++ code here
    
    TreeNode myTreeNode(5); // Root Node
    TreeNode myTreeLeftNode(3); // Left Child Node
    TreeNode myTreeRightNode(8); // Right Child Node
    
    
    // node connection, this is a very important step to build a binary tree using linked list idea
    myTreeNode.leftNode = &myTreeLeftNode; // myTreeNode is a root node so when it accesses the child node it uses . symbol, since it is not a pointer 
    // we need to use & symbol before myTreeLeftNode to pass the address of the Left Child Node to the root node left child pointer
    myTreeNode.rightNode = &myTreeRightNode;
    // cout << myTreeNode.leftNode -> nodeValue  << endl;   since the leftNode variable is a pointer so we need to use -> symbol to access the node value
    cout << myTreeNode.leftNode -> nodeValue  << endl;

    return 0;
}
